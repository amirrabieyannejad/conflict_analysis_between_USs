

********************* << Dataset: g08_frictionless >> ***************
* Table of potential conflict between user stories

       us_45  us_46  us_47  us_48  us_06  
us_45         x                           
us_46  x             x      x      x      
us_47         x                           
us_48         x                           
us_06         x                           


------------------[Potential Conflict between following User Stories found]--------------------------
{user_story_45_AND_user_story_46}
  
Affected Resource of US1 is: << data >>
Affected Resource of US2 is: << data >>
Affected Contain Resource US1 is: << data >>
Affected Resource US2 is: <<  >>
Contain Resources for: user_story_45: << [] >>
Contain Resources for: user_story_46: << [] >>

 Action of user_story_45 is: << validate >>  which is annotated with: << preserve >>
 Action of user_story_46 is: << update >>  which is annotated with: << delete >>

Conflict Reason is: << preserve-delete-Conflict >>

Highlighted elements in main parts of user stories: 
   user_story_45: #G08# As a ResearcherPublisher, i want #validate# my #data# with a minimum of clicks, 

   user_story_46: #G08# As a publisher, i want to be able to check that every time i #update# my #data# it is still good, 

Original texts of user stories are: 
   user_story_45: #G08# As a ResearcherPublisher, I want validate my data with a minimum of clicks, so that I can feel trust in the validity and usefulness of the data.

   user_story_46: #G08# As a publisher, I want to be able to check that every time I update my data it is still good, so that I can catch errors early and store reliable data.

------------------[Potential Conflict between following User Stories found]--------------------------
{user_story_46_AND_user_story_47}
  
Affected Resource of US1 is: << data >>
Affected Resource of US2 is: << data >>
Affected Contain Resource US1 is: << data >>
Affected Resource US2 is: <<  >>
Contain Resources for: user_story_46: << [] >>
Contain Resources for: user_story_47: << [] >>

 Action of user_story_46 is: << update >>  which is annotated with: << delete >>
 Action of user_story_47 is: << validate >>  which is annotated with: << preserve >>

Conflict Reason is: << delete-preserve-Conflict >>

Highlighted elements in main parts of user stories: 
   user_story_46: #G08# As a publisher, i want to be able to check that every time i #update# my #data# it is still good, 

   user_story_47: #G08# As a DeveloperWrangler, i want to use a command line tool that allows met to #validate# #data#, 

Original texts of user stories are: 
   user_story_46: #G08# As a publisher, I want to be able to check that every time I update my data it is still good, so that I can catch errors early and store reliable data.

   user_story_47: #G08# As a DeveloperWrangler, I want to use a command line tool that allows met to validate data, so that I can feel trust in the validity and usefulness of the data quickly and in the context of my command line workflow.

------------------[Potential Conflict between following User Stories found]--------------------------
{user_story_46_AND_user_story_48}
  
Affected Resource of US1 is: << data >>
Affected Resource of US2 is: << data >>
Affected Contain Resource US1 is: << data >>
Affected Resource US2 is: <<  >>
Contain Resources for: user_story_46: << [] >>
Contain Resources for: user_story_48: << [] >>

 Action of user_story_46 is: << update >>  which is annotated with: << delete >>
 Action of user_story_48 is: << validates >>  which is annotated with: << preserve >>

Conflict Reason is: << delete-preserve-Conflict >>

Highlighted elements in main parts of user stories: 
   user_story_46: #G08# As a publisher, i want to be able to check that every time i #update# my #data# it is still good, 

   user_story_48: #G08# As a developer, i want an online service that is connected to my #data# repository that #validates# #data# on update, 

Original texts of user stories are: 
   user_story_46: #G08# As a publisher, I want to be able to check that every time I update my data it is still good, so that I can catch errors early and store reliable data.

   user_story_48: #G08# As a developer, I want an online service that is connected to my data repository that validates data on update, so that I can delegate data validation to a third party.

------------------[Potential Conflict between following User Stories found]--------------------------
{user_story_06_AND_user_story_46}
  
Affected Resource of US1 is: << data >>
Affected Resource of US2 is: << data >>
Affected Contain Resource US1 is: << data >>
Affected Resource US2 is: <<  >>
Contain Resources for: user_story_06: << [] >>
Contain Resources for: user_story_46: << [] >>

 Action of user_story_06 is: << know >>  which is annotated with: << preserve >>
 Action of user_story_46 is: << update >>  which is annotated with: << delete >>

Conflict Reason is: << preserve-delete-Conflict >>

Highlighted elements in main parts of user stories: 
   user_story_06: #G08# As a ResearcherPublisher, i want to #know# that my #data# conforms to its #data# package profile, 

   user_story_46: #G08# As a publisher, i want to be able to check that every time i #update# my #data# it is still good, 

Original texts of user stories are: 
   user_story_06: #G08# As a ResearcherPublisher, I want to know that my data conforms to its Data Package profile, so that I can feel trust in the validity and usefulness of the data.

   user_story_46: #G08# As a publisher, I want to be able to check that every time I update my data it is still good, so that I can catch errors early and store reliable data.